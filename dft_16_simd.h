//
// Created by Gnome on 05.06.2021.
//

#ifndef FFT__DFT_16_SIMD_H_
#define FFT__DFT_16_SIMD_H_

#include "alias.h"
#include <immintrin.h>

const inline auto negative = _mm256_set1_pd(-1.0);
const inline Real sin_s_array_00[4]{0, 0, 0, 0};
const inline auto sin_s_00 = _mm256_load_pd(sin_s_array_00);
const inline auto sin_s_negative_00 = _mm256_mul_pd(sin_s_00, negative);
const inline Real cos_s_array_00[4]{1, 1, 1, 1};
const inline auto cos_s_00 = _mm256_load_pd(cos_s_array_00);
const inline Real sin_s_array_04[4]{0, 0, 0, 0};
const inline auto sin_s_04 = _mm256_load_pd(sin_s_array_04);
const inline auto sin_s_negative_04 = _mm256_mul_pd(sin_s_04, negative);
const inline Real cos_s_array_04[4]{1, 1, 1, 1};
const inline auto cos_s_04 = _mm256_load_pd(cos_s_array_04);
const inline Real sin_s_array_08[4]{0, 0, 0, 0};
const inline auto sin_s_08 = _mm256_load_pd(sin_s_array_08);
const inline auto sin_s_negative_08 = _mm256_mul_pd(sin_s_08, negative);
const inline Real cos_s_array_08[4]{1, 1, 1, 1};
const inline auto cos_s_08 = _mm256_load_pd(cos_s_array_08);
const inline Real sin_s_array_012[4]{0, 0, 0, 0};
const inline auto sin_s_012 = _mm256_load_pd(sin_s_array_012);
const inline auto sin_s_negative_012 = _mm256_mul_pd(sin_s_012, negative);
const inline Real cos_s_array_012[4]{1, 1, 1, 1};
const inline auto cos_s_012 = _mm256_load_pd(cos_s_array_012);
const inline Real sin_s_array_10[4]{0, 0.382683432365089781779232680491986684501171112060546875, 0.707106781186547461715008466853760182857513427734375, 0.9238795325112867384831361050601117312908172607421875};
const inline auto sin_s_10 = _mm256_load_pd(sin_s_array_10);
const inline auto sin_s_negative_10 = _mm256_mul_pd(sin_s_10, negative);
const inline Real cos_s_array_10[4]{1, 0.9238795325112867384831361050601117312908172607421875, 0.70710678118654757273731092936941422522068023681640625, 0.3826834323650898372903839117498137056827545166015625};
const inline auto cos_s_10 = _mm256_load_pd(cos_s_array_10);
const inline Real sin_s_array_14[4]{1, 0.9238795325112867384831361050601117312908172607421875, 0.70710678118654757273731092936941422522068023681640625, 0.3826834323650898372903839117498137056827545166015625};
const inline auto sin_s_14 = _mm256_load_pd(sin_s_array_14);
const inline auto sin_s_negative_14 = _mm256_mul_pd(sin_s_14, negative);
const inline Real cos_s_array_14[4]{6.12323399573676603586882014729198302312846062338790031898128063403419218957424163818359375e-17, -0.38268343236508972626808144923415966331958770751953125, -0.707106781186547461715008466853760182857513427734375, -0.9238795325112867384831361050601117312908172607421875};
const inline auto cos_s_14 = _mm256_load_pd(cos_s_array_14);
const inline Real sin_s_array_18[4]{1.22464679914735320717376402945839660462569212467758006379625612680683843791484832763671875e-16, -0.382683432365089670756930217976332642138004302978515625, -0.707106781186547461715008466853760182857513427734375, -0.923879532511286516438531180028803646564483642578125};
const inline auto sin_s_18 = _mm256_load_pd(sin_s_array_18);
const inline auto sin_s_negative_18 = _mm256_mul_pd(sin_s_18, negative);
const inline Real cos_s_array_18[4]{-1, -0.9238795325112867384831361050601117312908172607421875, -0.7071067811865476837596133918850682675838470458984375, -0.382683432365090336890744993070256896317005157470703125};
const inline auto cos_s_18 = _mm256_load_pd(cos_s_array_18);
const inline Real sin_s_array_112[4]{-1, -0.92387953251128662746083364254445768892765045166015625, -0.7071067811865476837596133918850682675838470458984375, -0.38268343236509039240189622432808391749858856201171875};
const inline auto sin_s_112 = _mm256_load_pd(sin_s_array_112);
const inline auto sin_s_negative_112 = _mm256_mul_pd(sin_s_112, negative);
const inline Real cos_s_array_112[4]{-1.8369701987210296875011296034045003113559498615810217092558787044254131615161895751953125e-16, 0.382683432365090003823837605523294769227504730224609375, 0.707106781186547461715008466853760182857513427734375, 0.923879532511286516438531180028803646564483642578125};
const inline auto cos_s_112 = _mm256_load_pd(cos_s_array_112);
const inline Real sin_s_array_20[4]{0, 0.707106781186547461715008466853760182857513427734375, 1, 0.70710678118654757273731092936941422522068023681640625};
const inline auto sin_s_20 = _mm256_load_pd(sin_s_array_20);
const inline auto sin_s_negative_20 = _mm256_mul_pd(sin_s_20, negative);
const inline Real cos_s_array_20[4]{1, 0.70710678118654757273731092936941422522068023681640625, 6.12323399573676603586882014729198302312846062338790031898128063403419218957424163818359375e-17, -0.707106781186547461715008466853760182857513427734375};
const inline auto cos_s_20 = _mm256_load_pd(cos_s_array_20);
const inline Real sin_s_array_24[4]{1.22464679914735320717376402945839660462569212467758006379625612680683843791484832763671875e-16, -0.707106781186547461715008466853760182857513427734375, -1, -0.7071067811865476837596133918850682675838470458984375};
const inline auto sin_s_24 = _mm256_load_pd(sin_s_array_24);
const inline auto sin_s_negative_24 = _mm256_mul_pd(sin_s_24, negative);
const inline Real cos_s_array_24[4]{-1, -0.7071067811865476837596133918850682675838470458984375, -1.8369701987210296875011296034045003113559498615810217092558787044254131615161895751953125e-16, 0.707106781186547461715008466853760182857513427734375};
const inline auto cos_s_24 = _mm256_load_pd(cos_s_array_24);
const inline Real sin_s_array_28[4]{-2.4492935982947064143475280589167932092513842493551601275925122536136768758296966552734375e-16, 0.70710678118654735069270600433810614049434661865234375, 1, 0.707106781186548349893428166978992521762847900390625};
const inline auto sin_s_28 = _mm256_load_pd(sin_s_array_28);
const inline auto sin_s_negative_28 = _mm256_mul_pd(sin_s_28, negative);
const inline Real cos_s_array_28[4]{1, 0.7071067811865476837596133918850682675838470458984375, 3.0616169978683831411939265144290861071468186371292985459291458028019405901432037353515625e-16, -0.70710678118654668455889122924418188631534576416015625};
const inline auto cos_s_28 = _mm256_load_pd(cos_s_array_28);
const inline Real sin_s_array_212[4]{3.673940397442059375002259206809000622711899723162043418511757408850826323032379150390625e-16, -0.7071067811865479058042183169163763523101806640625, -1, -0.70710678118654846091573062949464656412601470947265625};
const inline auto sin_s_212 = _mm256_load_pd(sin_s_array_212);
const inline auto sin_s_negative_212 = _mm256_mul_pd(sin_s_212, negative);
const inline Real cos_s_array_212[4]{-1, -0.7071067811865472396704035418224520981311798095703125, -4.28626379701573610184865766232129352060733411093618183684839095803909003734588623046875e-16, 0.707106781186546573536588766728527843952178955078125};
const inline auto cos_s_212 = _mm256_load_pd(cos_s_array_212);
const inline Real sin_s_array_30[4]{0, 0.9238795325112867384831361050601117312908172607421875, 0.70710678118654757273731092936941422522068023681640625, -0.382683432365089670756930217976332642138004302978515625};
const inline auto sin_s_30 = _mm256_load_pd(sin_s_array_30);
const inline auto sin_s_negative_30 = _mm256_mul_pd(sin_s_30, negative);
const inline Real cos_s_array_30[4]{1, 0.3826834323650898372903839117498137056827545166015625, -0.707106781186547461715008466853760182857513427734375, -0.9238795325112867384831361050601117312908172607421875};
const inline auto cos_s_30 = _mm256_load_pd(cos_s_array_30);
const inline Real sin_s_array_34[4]{-1, -0.38268343236509039240189622432808391749858856201171875, 0.70710678118654735069270600433810614049434661865234375, 0.9238795325112867384831361050601117312908172607421875};
const inline auto sin_s_34 = _mm256_load_pd(sin_s_array_34);
const inline auto sin_s_negative_34 = _mm256_mul_pd(sin_s_34, negative);
const inline Real cos_s_array_34[4]{-1.8369701987210296875011296034045003113559498615810217092558787044254131615161895751953125e-16, 0.923879532511286516438531180028803646564483642578125, 0.7071067811865476837596133918850682675838470458984375, -0.3826834323650898372903839117498137056827545166015625};
const inline auto cos_s_34 = _mm256_load_pd(cos_s_array_34);
const inline Real sin_s_array_38[4]{3.673940397442059375002259206809000622711899723162043418511757408850826323032379150390625e-16, -0.92387953251128640541622871751314960420131683349609375, -0.70710678118654846091573062949464656412601470947265625, 0.3826834323650880609335445114993490278720855712890625};
const inline auto sin_s_38 = _mm256_load_pd(sin_s_array_38);
const inline auto sin_s_negative_38 = _mm256_mul_pd(sin_s_38, negative);
const inline Real cos_s_array_38[4]{-1, -0.382683432365090558935349918101564981043338775634765625, 0.707106781186546573536588766728527843952178955078125, 0.923879532511287404616950880154035985469818115234375};
const inline auto cos_s_38 = _mm256_load_pd(cos_s_array_38);
const inline Real sin_s_array_312[4]{1, 0.382683432365089115645417905398062430322170257568359375, -0.7071067811865476837596133918850682675838470458984375, -0.92387953251128818177306811776361428201198577880859375};
const inline auto sin_s_312 = _mm256_load_pd(sin_s_array_312);
const inline auto sin_s_negative_312 = _mm256_mul_pd(sin_s_312, negative);
const inline Real cos_s_array_312[4]{5.510910596163089555541454573345879316398202886484458673521658056415617465972900390625e-16, -0.92387953251128707155004349260707385838031768798828125, -0.707106781186547461715008466853760182857513427734375, 0.3826834323650862845767051112488843500614166259765625};
const inline auto cos_s_312 = _mm256_load_pd(cos_s_array_312);
const inline Real sin_s_array_40[4]{0, 1, 1.22464679914735320717376402945839660462569212467758006379625612680683843791484832763671875e-16, -1};
const inline auto sin_s_40 = _mm256_load_pd(sin_s_array_40);
const inline auto sin_s_negative_40 = _mm256_mul_pd(sin_s_40, negative);
const inline Real cos_s_array_40[4]{1, 6.12323399573676603586882014729198302312846062338790031898128063403419218957424163818359375e-17, -1, -1.8369701987210296875011296034045003113559498615810217092558787044254131615161895751953125e-16};
const inline auto cos_s_40 = _mm256_load_pd(cos_s_array_40);
const inline Real sin_s_array_44[4]{-2.4492935982947064143475280589167932092513842493551601275925122536136768758296966552734375e-16, 1, 3.673940397442059375002259206809000622711899723162043418511757408850826323032379150390625e-16, -1};
const inline auto sin_s_44 = _mm256_load_pd(sin_s_array_44);
const inline auto sin_s_negative_44 = _mm256_mul_pd(sin_s_44, negative);
const inline Real cos_s_array_44[4]{1, 3.0616169978683831411939265144290861071468186371292985459291458028019405901432037353515625e-16, -1, -4.28626379701573610184865766232129352060733411093618183684839095803909003734588623046875e-16};
const inline auto cos_s_44 = _mm256_load_pd(cos_s_array_44);
const inline Real sin_s_array_48[4]{-4.898587196589412828695056117833586418502768498710320255185024507227353751659393310546875e-16, 1, 6.123233995736766282387853028858172214293637274258597091858291605603881180286407470703125e-16, -1};
const inline auto sin_s_48 = _mm256_load_pd(sin_s_array_48);
const inline auto sin_s_negative_48 = _mm256_mul_pd(sin_s_48, negative);
const inline Real cos_s_array_48[4]{1, 5.510910596163089555541454573345879316398202886484458673521658056415617465972900390625e-16, -1, -2.4499125789312945683860095121294076582867658455067161327178837382234632968902587890625e-15};
const inline auto cos_s_48 = _mm256_load_pd(cos_s_array_48);
const inline Real sin_s_array_412[4]{-7.34788079488411875000451841361800124542379944632408683702351481770165264606475830078125e-16, 1, 8.5725275940314722036973153246425870412146682218723636736967819160781800746917724609375e-16, -1};
const inline auto sin_s_412 = _mm256_load_pd(sin_s_array_412);
const inline auto sin_s_negative_412 = _mm256_mul_pd(sin_s_412, negative);
const inline Real cos_s_array_412[4]{1, -9.8033641995447081838510582940580740920200595624189876531318077468313276767730712890625e-16, -1, -2.69484193876076525912456889433432481744493960061637150005253715789876878261566162109375e-15};
const inline auto cos_s_412 = _mm256_load_pd(cos_s_array_412);
const inline Real sin_s_array_50[4]{0, 0.9238795325112867384831361050601117312908172607421875, -0.707106781186547461715008466853760182857513427734375, -0.38268343236509039240189622432808391749858856201171875};
const inline auto sin_s_50 = _mm256_load_pd(sin_s_array_50);
const inline auto sin_s_negative_50 = _mm256_mul_pd(sin_s_50, negative);
const inline Real cos_s_array_50[4]{1, -0.38268343236508972626808144923415966331958770751953125, -0.7071067811865476837596133918850682675838470458984375, 0.923879532511286516438531180028803646564483642578125};
const inline auto cos_s_50 = _mm256_load_pd(cos_s_array_50);
const inline Real sin_s_array_54[4]{1, -0.3826834323650898372903839117498137056827545166015625, -0.70710678118654846091573062949464656412601470947265625, 0.92387953251128640541622871751314960420131683349609375};
const inline auto sin_s_54 = _mm256_load_pd(sin_s_array_54);
const inline auto sin_s_negative_54 = _mm256_mul_pd(sin_s_54, negative);
const inline Real cos_s_array_54[4]{3.0616169978683831411939265144290861071468186371292985459291458028019405901432037353515625e-16, -0.9238795325112867384831361050601117312908172607421875, 0.707106781186546573536588766728527843952178955078125, 0.382683432365090669957652380617219023406505584716796875};
const inline auto cos_s_54 = _mm256_load_pd(cos_s_array_54);
const inline Real sin_s_array_58[4]{6.123233995736766282387853028858172214293637274258597091858291605603881180286407470703125e-16, -0.92387953251128684950543856757576577365398406982421875, 0.70710678118654757273731092936941422522068023681640625, 0.382683432365092557336794243383337743580341339111328125};
const inline auto sin_s_58 = _mm256_load_pd(sin_s_array_58);
const inline auto sin_s_negative_58 = _mm256_mul_pd(sin_s_58, negative);
const inline Real cos_s_array_58[4]{-1, 0.382683432365089559734627755460678599774837493896484375, 0.707106781186547461715008466853760182857513427734375, -0.923879532511285628260111479903571307659149169921875};
const inline auto cos_s_58 = _mm256_load_pd(cos_s_array_58);
const inline Real sin_s_array_512[4]{-1, 0.382683432365090892002257305648527108132839202880859375, 0.70710678118654890500494047955726273357868194580078125, -0.92387953251128618337162379248184151947498321533203125};
const inline auto sin_s_512 = _mm256_load_pd(sin_s_array_512);
const inline auto sin_s_negative_512 = _mm256_mul_pd(sin_s_512, negative);
const inline Real cos_s_array_512[4]{-2.69484193876076525912456889433432481744493960061637150005253715789876878261566162109375e-15, 0.9238795325112862943939262549974955618381500244140625, -0.70710678118654612944737891666591167449951171875, -0.382683432365091225069164693195489235222339630126953125};
const inline auto cos_s_512 = _mm256_load_pd(cos_s_array_512);
const inline Real sin_s_array_60[4]{0, 0.70710678118654757273731092936941422522068023681640625, -1, 0.70710678118654735069270600433810614049434661865234375};
const inline auto sin_s_60 = _mm256_load_pd(sin_s_array_60);
const inline auto sin_s_negative_60 = _mm256_mul_pd(sin_s_60, negative);
const inline Real cos_s_array_60[4]{1, -0.707106781186547461715008466853760182857513427734375, -1.8369701987210296875011296034045003113559498615810217092558787044254131615161895751953125e-16, 0.7071067811865476837596133918850682675838470458984375};
const inline auto cos_s_60 = _mm256_load_pd(cos_s_array_60);
const inline Real sin_s_array_64[4]{3.673940397442059375002259206809000622711899723162043418511757408850826323032379150390625e-16, -0.70710678118654846091573062949464656412601470947265625, 1, -0.7071067811865476837596133918850682675838470458984375};
const inline auto sin_s_64 = _mm256_load_pd(sin_s_array_64);
const inline auto sin_s_negative_64 = _mm256_mul_pd(sin_s_64, negative);
const inline Real cos_s_array_64[4]{-1, 0.707106781186546573536588766728527843952178955078125, 5.510910596163089555541454573345879316398202886484458673521658056415617465972900390625e-16, -0.707106781186547461715008466853760182857513427734375};
const inline auto cos_s_64 = _mm256_load_pd(cos_s_array_64);
const inline Real sin_s_array_68[4]{-7.34788079488411875000451841361800124542379944632408683702351481770165264606475830078125e-16, 0.70710678118654879398263801704160869121551513671875, -1, 0.70710678118654490820205182899371720850467681884765625};
const inline auto sin_s_68 = _mm256_load_pd(sin_s_array_68);
const inline auto sin_s_negative_68 = _mm256_mul_pd(sin_s_68, negative);
const inline Real cos_s_array_68[4]{1, -0.7071067811865463514919838416972197592258453369140625, -2.69484193876076525912456889433432481744493960061637150005253715789876878261566162109375e-15, 0.707106781186550126250267567229457199573516845703125};
const inline auto cos_s_68 = _mm256_load_pd(cos_s_array_68);
const inline Real sin_s_array_612[4]{1.102182119232617911108290914669175863279640577296891734704331611283123493194580078125e-15, -0.70710678118654646251428630421287380158901214599609375, 1, -0.707106781186542132644490266102366149425506591796875};
const inline auto sin_s_612 = _mm256_load_pd(sin_s_array_612);
const inline auto sin_s_negative_612 = _mm256_mul_pd(sin_s_612, negative);
const inline Real cos_s_array_612[4]{-1, 0.7071067811865485719380330920103006064891815185546875, -4.90477700295529634123213370248924443817799766719145448945482712588272988796234130859375e-16, -0.70710678118655290180782913012080825865268707275390625};
const inline auto cos_s_612 = _mm256_load_pd(cos_s_array_612);
const inline Real sin_s_array_70[4]{0, 0.3826834323650898372903839117498137056827545166015625, -0.7071067811865476837596133918850682675838470458984375, 0.9238795325112867384831361050601117312908172607421875};
const inline auto sin_s_70 = _mm256_load_pd(sin_s_array_70);
const inline auto sin_s_negative_70 = _mm256_mul_pd(sin_s_70, negative);
const inline Real cos_s_array_70[4]{1, -0.9238795325112867384831361050601117312908172607421875, 0.707106781186547461715008466853760182857513427734375, -0.3826834323650898372903839117498137056827545166015625};
const inline auto cos_s_70 = _mm256_load_pd(cos_s_array_70);
const inline Real sin_s_array_74[4]{-1, 0.92387953251128640541622871751314960420131683349609375, -0.7071067811865476837596133918850682675838470458984375, 0.382683432365087838888939586468040943145751953125};
const inline auto sin_s_74 = _mm256_load_pd(sin_s_array_74);
const inline auto sin_s_negative_74 = _mm256_mul_pd(sin_s_74, negative);
const inline Real cos_s_array_74[4]{-4.28626379701573610184865766232129352060733411093618183684839095803909003734588623046875e-16, 0.382683432365090669957652380617219023406505584716796875, -0.707106781186547461715008466853760182857513427734375, 0.92387953251128751563925334266969002783298492431640625};
const inline auto cos_s_74 = _mm256_load_pd(cos_s_array_74);
const inline Real sin_s_array_78[4]{8.5725275940314722036973153246425870412146682218723636736967819160781800746917724609375e-16, -0.382683432365089448712325292945024557411670684814453125, 0.70710678118654890500494047955726273357868194580078125, -0.92387953251128840381767304279492236673831939697265625};
const inline auto sin_s_78 = _mm256_load_pd(sin_s_array_78);
const inline auto sin_s_negative_78 = _mm256_mul_pd(sin_s_78, negative);
const inline Real cos_s_array_78[4]{-1, 0.92387953251128684950543856757576577365398406982421875, -0.70710678118654612944737891666591167449951171875, 0.382683432365085784976344029928441159427165985107421875};
const inline auto cos_s_78 = _mm256_load_pd(cos_s_array_78);
const inline Real sin_s_array_712[4]{1, -0.92387953251128873688458043034188449382781982421875, 0.7071067811865445751351444414467550814151763916015625, -0.38268343236508373106374847338884137570858001708984375};
const inline auto sin_s_712 = _mm256_load_pd(sin_s_array_712);
const inline auto sin_s_negative_712 = _mm256_mul_pd(sin_s_712, negative);
const inline Real cos_s_array_712[4]{-4.90477700295529634123213370248924443817799766719145448945482712588272988796234130859375e-16, -0.382683432365084896797924329803208820521831512451171875, 0.70710678118655045931717495477641932666301727294921875, -0.92387953251128929199609274292015470564365386962890625};
const inline auto cos_s_712 = _mm256_load_pd(cos_s_array_712);
const inline Real sin_s_array_80[4]{0, 1.22464679914735320717376402945839660462569212467758006379625612680683843791484832763671875e-16, -2.4492935982947064143475280589167932092513842493551601275925122536136768758296966552734375e-16, 3.673940397442059375002259206809000622711899723162043418511757408850826323032379150390625e-16};
const inline auto sin_s_80 = _mm256_load_pd(sin_s_array_80);
const inline auto sin_s_negative_80 = _mm256_mul_pd(sin_s_80, negative);
const inline Real cos_s_array_80[4]{1, -1, 1, -1};
const inline auto cos_s_80 = _mm256_load_pd(cos_s_array_80);
const inline Real sin_s_array_84[4]{-4.898587196589412828695056117833586418502768498710320255185024507227353751659393310546875e-16, 6.123233995736766282387853028858172214293637274258597091858291605603881180286407470703125e-16, -7.34788079488411875000451841361800124542379944632408683702351481770165264606475830078125e-16, 8.5725275940314722036973153246425870412146682218723636736967819160781800746917724609375e-16};
const inline auto sin_s_84 = _mm256_load_pd(sin_s_array_84);
const inline auto sin_s_negative_84 = _mm256_mul_pd(sin_s_84, negative);
const inline Real cos_s_array_84[4]{1, -1, 1, -1};
const inline auto cos_s_84 = _mm256_load_pd(cos_s_array_84);
const inline Real sin_s_array_88[4]{-9.79717439317882565739011223566717283700553699742064051037004901445470750331878662109375e-16, 1.102182119232617911108290914669175863279640577296891734704331611283123493194580078125e-15, -1.224646799147353256477570605771634442858727454851719418371658321120776236057281494140625e-15, 4.899825157862589136772019024258815316573531691013432265435767476446926593780517578125e-15};
const inline auto sin_s_88 = _mm256_load_pd(sin_s_array_88);
const inline auto sin_s_negative_88 = _mm256_mul_pd(sin_s_88, negative);
const inline Real cos_s_array_88[4]{1, -1, 1, -1};
const inline auto cos_s_88 = _mm256_load_pd(cos_s_array_88);
const inline Real sin_s_array_812[4]{-1.46957615897682375000090368272360024908475988926481736740470296354033052921295166015625e-15, -1.9606728399089416367702116588116148184040119124837975306263615493662655353546142578125e-15, -1.7145055188062944407394630649285174082429336443744727347393563832156360149383544921875e-15, 5.3896838775215305182491377886686496348898792012327430001050743157975375652313232421875e-15};
const inline auto sin_s_812 = _mm256_load_pd(sin_s_array_812);
const inline auto sin_s_negative_812 = _mm256_mul_pd(sin_s_812, negative);
const inline Real cos_s_array_812[4]{1, -1, 1, -1};
const inline auto cos_s_812 = _mm256_load_pd(cos_s_array_812);
const inline Real sin_s_array_90[4]{0, -0.382683432365089670756930217976332642138004302978515625, 0.70710678118654735069270600433810614049434661865234375, -0.92387953251128640541622871751314960420131683349609375};
const inline auto sin_s_90 = _mm256_load_pd(sin_s_array_90);
const inline auto sin_s_negative_90 = _mm256_mul_pd(sin_s_90, negative);
const inline Real cos_s_array_90[4]{1, -0.9238795325112867384831361050601117312908172607421875, 0.7071067811865476837596133918850682675838470458984375, -0.382683432365090558935349918101564981043338775634765625};
const inline auto cos_s_90 = _mm256_load_pd(cos_s_array_90);
const inline Real sin_s_array_94[4]{1, -0.92387953251128684950543856757576577365398406982421875, 0.70710678118654879398263801704160869121551513671875, -0.382683432365089448712325292945024557411670684814453125};
const inline auto sin_s_94 = _mm256_load_pd(sin_s_array_94);
const inline auto sin_s_negative_94 = _mm256_mul_pd(sin_s_94, negative);
const inline Real cos_s_array_94[4]{5.510910596163089555541454573345879316398202886484458673521658056415617465972900390625e-16, 0.382683432365089559734627755460678599774837493896484375, -0.7071067811865463514919838416972197592258453369140625, 0.92387953251128684950543856757576577365398406982421875};
const inline auto cos_s_94 = _mm256_load_pd(cos_s_array_94);
const inline Real sin_s_array_98[4]{1.102182119232617911108290914669175863279640577296891734704331611283123493194580078125e-15, 0.382683432365087394799729736405424773693084716796875, -0.7071067811865472396704035418224520981311798095703125, 0.92387953251128462905938931726268492639064788818359375};
const inline auto sin_s_98 = _mm256_load_pd(sin_s_array_98);
const inline auto sin_s_negative_98 = _mm256_mul_pd(sin_s_98, negative);
const inline Real cos_s_array_98[4]{-1, 0.92387953251128773768385826770099811255931854248046875, -0.7071067811865479058042183169163763523101806640625, 0.382683432365094888805145956212072633206844329833984375};
const inline auto cos_s_98 = _mm256_load_pd(cos_s_array_98);
const inline Real sin_s_array_912[4]{-1, 0.92387953251128729359464841763838194310665130615234375, -0.70710678118654701762579861679114401340484619140625, 0.382683432365093778582121331055532209575176239013671875};
const inline auto sin_s_912 = _mm256_load_pd(sin_s_array_912);
const inline auto sin_s_negative_912 = _mm256_mul_pd(sin_s_912, negative);
const inline Real cos_s_array_912[4]{-3.4296300182491773313402470409490762949194608659453376020564974169246852397918701171875e-15, -0.3826834323650885050227543615619651973247528076171875, 0.70710678118654801682652077943203039467334747314453125, -0.92387953251128507314859916732530109584331512451171875};
const inline auto cos_s_912 = _mm256_load_pd(cos_s_array_912);
const inline Real sin_s_array_100[4]{0, -0.707106781186547461715008466853760182857513427734375, 1, -0.70710678118654846091573062949464656412601470947265625};
const inline auto sin_s_100 = _mm256_load_pd(sin_s_array_100);
const inline auto sin_s_negative_100 = _mm256_mul_pd(sin_s_100, negative);
const inline Real cos_s_array_100[4]{1, -0.7071067811865476837596133918850682675838470458984375, 3.0616169978683831411939265144290861071468186371292985459291458028019405901432037353515625e-16, 0.707106781186546573536588766728527843952178955078125};
const inline auto cos_s_100 = _mm256_load_pd(cos_s_array_100);
const inline Real sin_s_array_104[4]{6.123233995736766282387853028858172214293637274258597091858291605603881180286407470703125e-16, 0.70710678118654757273731092936941422522068023681640625, -1, 0.70710678118654890500494047955726273357868194580078125};
const inline auto sin_s_104 = _mm256_load_pd(sin_s_array_104);
const inline auto sin_s_negative_104 = _mm256_mul_pd(sin_s_104, negative);
const inline Real cos_s_array_104[4]{-1, 0.707106781186547461715008466853760182857513427734375, -2.69484193876076525912456889433432481744493960061637150005253715789876878261566162109375e-15, -0.70710678118654612944737891666591167449951171875};
const inline auto cos_s_104 = _mm256_load_pd(cos_s_array_104);
const inline Real sin_s_array_108[4]{-1.224646799147353256477570605771634442858727454851719418371658321120776236057281494140625e-15, -0.7071067811865472396704035418224520981311798095703125, 1, -0.707106781186551902607106967479921877384185791015625};
const inline auto sin_s_108 = _mm256_load_pd(sin_s_array_108);
const inline auto sin_s_negative_108 = _mm256_mul_pd(sin_s_108, negative);
const inline Real cos_s_array_108[4]{1, -0.7071067811865479058042183169163763523101806640625, -2.4554834046605899268846056435724512289266134178362943618623148722690530121326446533203125e-16, 0.7071067811865432428675148912589065730571746826171875};
const inline auto cos_s_108 = _mm256_load_pd(cos_s_array_108);
const inline Real sin_s_array_1012[4]{5.3896838775215305182491377886686496348898792012327430001050743157975375652313232421875e-15, 0.707106781186549238071847867104224860668182373046875, -1, 0.70710678118654979318336017968249507248401641845703125};
const inline auto sin_s_1012 = _mm256_load_pd(sin_s_array_1012);
const inline auto sin_s_negative_1012 = _mm256_mul_pd(sin_s_1012, negative);
const inline Real cos_s_array_1012[4]{-1, 0.70710678118654579638047152911894954741001129150390625, -3.91948873790811871281736580535891061323580837616464833672580425627529621124267578125e-15, -0.70710678118654524126895921654067933559417724609375};
const inline auto cos_s_1012 = _mm256_load_pd(cos_s_array_1012);
const inline Real sin_s_array_110[4]{0, -0.923879532511286516438531180028803646564483642578125, 0.707106781186548349893428166978992521762847900390625, 0.38268343236508972626808144923415966331958770751953125};
const inline auto sin_s_110 = _mm256_load_pd(sin_s_array_110);
const inline auto sin_s_negative_110 = _mm256_mul_pd(sin_s_110, negative);
const inline Real cos_s_array_110[4]{1, -0.382683432365090336890744993070256896317005157470703125, -0.70710678118654668455889122924418188631534576416015625, 0.9238795325112867384831361050601117312908172607421875};
const inline auto cos_s_110 = _mm256_load_pd(cos_s_array_110);
const inline Real sin_s_array_114[4]{-1, 0.38268343236508928217887159917154349386692047119140625, 0.707106781186547461715008466853760182857513427734375, -0.92387953251128707155004349260707385838031768798828125};
const inline auto sin_s_114 = _mm256_load_pd(sin_s_array_114);
const inline auto sin_s_negative_114 = _mm256_mul_pd(sin_s_114, negative);
const inline Real cos_s_array_114[4]{-2.4499125789312945683860095121294076582867658455067161327178837382234632968902587890625e-15, -0.92387953251128696052774103009141981601715087890625, 0.7071067811865476837596133918850682675838470458984375, 0.382683432365089115645417905398062430322170257568359375};
const inline auto cos_s_114 = _mm256_load_pd(cos_s_array_114);
const inline Real sin_s_array_118[4]{4.899825157862589136772019024258815316573531691013432265435767476446926593780517578125e-15, 0.923879532511287404616950880154035985469818115234375, -0.7071067811865467955811936917598359286785125732421875, -0.382683432365083564530294779615360312163829803466796875};
const inline auto sin_s_118 = _mm256_load_pd(sin_s_array_118);
const inline auto sin_s_negative_118 = _mm256_mul_pd(sin_s_118, negative);
const inline Real cos_s_array_118[4]{-1, 0.382683432365088338489300667788484133780002593994140625, 0.70710678118654823887112570446333847939968109130859375, -0.92387953251128929199609274292015470564365386962890625};
const inline auto cos_s_118 = _mm256_load_pd(cos_s_array_118);
const inline Real sin_s_array_1112[4]{1, -0.382683432365084008619504629677976481616497039794921875, -0.70710678118654646251428630421287380158901214599609375, 0.9238795325112902911968149055610410869121551513671875};
const inline auto sin_s_1112 = _mm256_load_pd(sin_s_array_1112);
const inline auto sin_s_negative_1112 = _mm256_mul_pd(sin_s_1112, negative);
const inline Real cos_s_array_1112[4]{2.4431037919288229018104504742611351895761550808740258933227096349583007395267486572265625e-16, 0.923879532511289180973790280404500663280487060546875, -0.7071067811865485719380330920103006064891815185546875, -0.38268343236508128857309429804445244371891021728515625};
const inline auto cos_s_1112 = _mm256_load_pd(cos_s_array_1112);
const inline Real sin_s_array_120[4]{0, -1, 3.673940397442059375002259206809000622711899723162043418511757408850826323032379150390625e-16, 1};
const inline auto sin_s_120 = _mm256_load_pd(sin_s_array_120);
const inline auto sin_s_negative_120 = _mm256_mul_pd(sin_s_120, negative);
const inline Real cos_s_array_120[4]{1, -1.8369701987210296875011296034045003113559498615810217092558787044254131615161895751953125e-16, -1, 5.510910596163089555541454573345879316398202886484458673521658056415617465972900390625e-16};
const inline auto cos_s_120 = _mm256_load_pd(cos_s_array_120);
const inline Real sin_s_array_124[4]{-7.34788079488411875000451841361800124542379944632408683702351481770165264606475830078125e-16, -1, 1.102182119232617911108290914669175863279640577296891734704331611283123493194580078125e-15, 1};
const inline auto sin_s_124 = _mm256_load_pd(sin_s_array_124);
const inline auto sin_s_negative_124 = _mm256_mul_pd(sin_s_124, negative);
const inline Real cos_s_array_124[4]{1, -2.69484193876076525912456889433432481744493960061637150005253715789876878261566162109375e-15, -1, -4.90477700295529634123213370248924443817799766719145448945482712588272988796234130859375e-16};
const inline auto cos_s_124 = _mm256_load_pd(cos_s_array_124);
const inline Real sin_s_array_128[4]{-1.46957615897682375000090368272360024908475988926481736740470296354033052921295166015625e-15, -1, 5.3896838775215305182491377886686496348898792012327430001050743157975375652313232421875e-15, 1};
const inline auto sin_s_128 = _mm256_load_pd(sin_s_array_128);
const inline auto sin_s_negative_128 = _mm256_mul_pd(sin_s_128, negative);
const inline Real cos_s_array_128[4]{1, -3.4296300182491773313402470409490762949194608659453376020564974169246852397918701171875e-15, -1, 7.34973773679388449401893375740002838658886281930637807136008632369339466094970703125e-15};
const inline auto cos_s_128 = _mm256_load_pd(cos_s_array_128);
const inline Real sin_s_array_1212[4]{-2.20436423846523582221658182933835172655928115459378346940866322256624698638916015625e-15, -1, -9.8095540059105926824642674049784888763559953343829089789096542517654597759246826171875e-16, 1};
const inline auto sin_s_1212 = _mm256_load_pd(sin_s_array_1212);
const inline auto sin_s_negative_1212 = _mm256_mul_pd(sin_s_1212, negative);
const inline Real cos_s_array_1212[4]{1, 2.94100925986341284958577009872332493347030051011881113254275987856090068817138671875e-15, -1, 1.518995317388329724165449674827832174647053616045599966355439391918480396270751953125e-14};
const inline auto cos_s_1212 = _mm256_load_pd(cos_s_array_1212);
const inline Real sin_s_array_130[4]{0, -0.92387953251128662746083364254445768892765045166015625, -0.7071067811865479058042183169163763523101806640625, 0.3826834323650907254688036118750460445880889892578125};
const inline auto sin_s_130 = _mm256_load_pd(sin_s_array_130);
const inline auto sin_s_negative_130 = _mm256_mul_pd(sin_s_130, negative);
const inline Real cos_s_array_130[4]{1, 0.382683432365090003823837605523294769227504730224609375, -0.7071067811865472396704035418224520981311798095703125, -0.9238795325112862943939262549974955618381500244140625};
const inline auto cos_s_130 = _mm256_load_pd(cos_s_array_130);
const inline Real sin_s_array_134[4]{1, 0.3826834323650876168443346614367328584194183349609375, -0.7071067811865490160272429420729167759418487548828125, -0.92387953251128607234932132996618747711181640625};
const inline auto sin_s_134 = _mm256_load_pd(sin_s_array_134);
const inline auto sin_s_negative_134 = _mm256_mul_pd(sin_s_134, negative);
const inline Real cos_s_array_134[4]{-9.8033641995447081838510582940580740920200595624189876531318077468313276767730712890625e-16, 0.9238795325112876266615558051853440701961517333984375, 0.70710678118654601842507645415025763213634490966796875, -0.382683432365091447113769618226797319948673248291015625};
const inline auto cos_s_134 = _mm256_load_pd(cos_s_array_134);
const inline Real sin_s_array_138[4]{-1.9606728399089416367702116588116148184040119124837975306263615493662655353546142578125e-15, 0.92387953251128729359464841763838194310665130615234375, 0.70710678118654424206823705389979295432567596435546875, -0.382683432365097164762346437782980501651763916015625};
const inline auto sin_s_138 = _mm256_load_pd(sin_s_array_138);
const inline auto sin_s_negative_138 = _mm256_mul_pd(sin_s_138, negative);
const inline Real cos_s_array_138[4]{-1, -0.3826834323650885050227543615619651973247528076171875, 0.7071067811865507923840823423233814537525177001953125, 0.92387953251128374088096961713745258748531341552734375};
const inline auto cos_s_138 = _mm256_load_pd(cos_s_array_138);
const inline Real sin_s_array_1312[4]{-1, -0.382683432365089448712325292945024557411670684814453125, 0.707106781186550126250267567229457199573516845703125, 0.9238795325112840739478770046844147145748138427734375};
const inline auto sin_s_1312 = _mm256_load_pd(sin_s_array_1312);
const inline auto sin_s_negative_1312 = _mm256_mul_pd(sin_s_1312, negative);
const inline Real cos_s_array_1312[4]{-4.16441809773758900912547257705792506652969948988118886745724012143909931182861328125e-15, -0.92387953251128684950543856757576577365398406982421875, -0.7071067811865450192243542915093712508678436279296875, 0.382683432365096221072775506399921141564846038818359375};
const inline auto cos_s_1312 = _mm256_load_pd(cos_s_array_1312);
const inline Real sin_s_array_140[4]{0, -0.7071067811865476837596133918850682675838470458984375, -1, -0.7071067811865476837596133918850682675838470458984375};
const inline auto sin_s_140 = _mm256_load_pd(sin_s_array_140);
const inline auto sin_s_negative_140 = _mm256_mul_pd(sin_s_140, negative);
const inline Real cos_s_array_140[4]{1, 0.707106781186547461715008466853760182857513427734375, -4.28626379701573610184865766232129352060733411093618183684839095803909003734588623046875e-16, -0.707106781186547461715008466853760182857513427734375};
const inline auto cos_s_140 = _mm256_load_pd(cos_s_array_140);
const inline Real sin_s_array_144[4]{8.5725275940314722036973153246425870412146682218723636736967819160781800746917724609375e-16, 0.70710678118654890500494047955726273357868194580078125, 1, 0.7071067811865445751351444414467550814151763916015625};
const inline auto sin_s_144 = _mm256_load_pd(sin_s_array_144);
const inline auto sin_s_negative_144 = _mm256_mul_pd(sin_s_144, negative);
const inline Real cos_s_array_144[4]{-1, -0.70710678118654612944737891666591167449951171875, -4.90477700295529634123213370248924443817799766719145448945482712588272988796234130859375e-16, 0.70710678118655045931717495477641932666301727294921875};
const inline auto cos_s_144 = _mm256_load_pd(cos_s_array_144);
const inline Real sin_s_array_148[4]{-1.7145055188062944407394630649285174082429336443744727347393563832156360149383544921875e-15, -0.70710678118654701762579861679114401340484619140625, -1, -0.7071067811865414665106754910084418952465057373046875};
const inline auto sin_s_148 = _mm256_load_pd(sin_s_array_148);
const inline auto sin_s_negative_148 = _mm256_mul_pd(sin_s_148, negative);
const inline Real cos_s_array_148[4]{1, 0.70710678118654801682652077943203039467334747314453125, -3.91948873790811871281736580535891061323580837616464833672580425627529621124267578125e-15, -0.70710678118655356794164390521473251283168792724609375};
const inline auto cos_s_148 = _mm256_load_pd(cos_s_array_148);
const inline Real sin_s_array_1412[4]{-9.8095540059105926824642674049784888763559953343829089789096542517654597759246826171875e-16, 0.70710678118654002322074347830493934452533721923828125, 1, 0.7071067811865383578862065405701287090778350830078125};
const inline auto sin_s_1412 = _mm256_load_pd(sin_s_array_1412);
const inline auto sin_s_negative_1412 = _mm256_mul_pd(sin_s_1412, negative);
const inline Real cos_s_array_1412[4]{-1, -0.7071067811865550112315759179182350635528564453125, 8.329455176111767256973171286219697023221557839744999540698700002394616603851318359375e-15, 0.707106781186556787588415318168699741363525390625};
const inline auto cos_s_1412 = _mm256_load_pd(cos_s_array_1412);
const inline Real sin_s_array_150[4]{0, -0.38268343236509039240189622432808391749858856201171875, -0.70710678118654846091573062949464656412601470947265625, -0.92387953251128684950543856757576577365398406982421875};
const inline auto sin_s_150 = _mm256_load_pd(sin_s_array_150);
const inline auto sin_s_negative_150 = _mm256_mul_pd(sin_s_150, negative);
const inline Real cos_s_array_150[4]{1, 0.923879532511286516438531180028803646564483642578125, 0.707106781186546573536588766728527843952178955078125, 0.382683432365089559734627755460678599774837493896484375};
const inline auto cos_s_150 = _mm256_load_pd(cos_s_array_150);
const inline Real sin_s_array_154[4]{-1, -0.92387953251128618337162379248184151947498321533203125, -0.7071067811865472396704035418224520981311798095703125, -0.382683432365090336890744993070256896317005157470703125};
const inline auto sin_s_154 = _mm256_load_pd(sin_s_array_154);
const inline auto sin_s_negative_154 = _mm256_mul_pd(sin_s_154, negative);
const inline Real cos_s_array_154[4]{-2.69484193876076525912456889433432481744493960061637150005253715789876878261566162109375e-15, -0.382683432365091225069164693195489235222339630126953125, -0.7071067811865479058042183169163763523101806640625, -0.923879532511286516438531180028803646564483642578125};
const inline auto cos_s_154 = _mm256_load_pd(cos_s_array_154);
const inline Real sin_s_array_158[4]{5.3896838775215305182491377886686496348898792012327430001050743157975375652313232421875e-15, 0.382683432365093778582121331055532209575176239013671875, 0.70710678118654979318336017968249507248401641845703125, 0.9238795325112902911968149055610410869121551513671875};
const inline auto sin_s_158 = _mm256_load_pd(sin_s_array_158);
const inline auto sin_s_negative_158 = _mm256_mul_pd(sin_s_158, negative);
const inline Real cos_s_array_158[4]{-1, -0.92387953251128507314859916732530109584331512451171875, -0.70710678118654524126895921654067933559417724609375, -0.38268343236508128857309429804445244371891021728515625};
const inline auto cos_s_158 = _mm256_load_pd(cos_s_array_158);
const inline Real sin_s_array_1512[4]{1, 0.92387953251128951404069766795146279036998748779296875, 0.707106781186548349893428166978992521762847900390625, 0.382683432365085340887134179865824989974498748779296875};
const inline auto sin_s_1512 = _mm256_load_pd(sin_s_array_1512);
const inline auto sin_s_negative_1512 = _mm256_mul_pd(sin_s_1512, negative);
const inline Real cos_s_array_1512[4]{9.79098458681294115877690312474675805266960122545671918459220250952057540416717529296875e-16, 0.38268343236508306492993369829491712152957916259765625, 0.70710678118654668455889122924418188631534576416015625, 0.92387953251128862586227796782623045146465301513671875};
const inline auto cos_s_1512 = _mm256_load_pd(cos_s_array_1512);


inline Real accumulate(__m256d x) {
    x = _mm256_hadd_pd(x, x);

    return _mm256_cvtsd_f64(_mm256_add_pd(x, _mm256_permute2f128_pd(x, x, 0x31)));
}
inline void dft_16_simd(const std::vector<Complex>& f, std::vector<Complex>& x, unsigned int depth, unsigned int odd, unsigned int offset) {
    Real temp_array[4];
    temp_array[0] = f[odd].real();
    temp_array[1] = f[depth + odd].real();
    temp_array[2] = f[2 * depth + odd].real();
    temp_array[3] = f[3 * depth + odd].real();
    auto f_reals_0_1_2_3 = _mm256_load_pd(temp_array);
    temp_array[0] = f[odd].imag();
    temp_array[1] = f[1 * depth + odd].imag();
    temp_array[2] = f[2 * depth + odd].imag();
    temp_array[3] = f[3 * depth + odd].imag();
    auto f_imags_0_1_2_3 = _mm256_load_pd(temp_array);
    temp_array[0] = f[4 * depth + odd].real();
    temp_array[1] = f[5 * depth + odd].real();
    temp_array[2] = f[6 * depth + odd].real();
    temp_array[3] = f[7 * depth + odd].real();
    auto f_reals_4_5_6_7 = _mm256_load_pd(temp_array);
    temp_array[0] = f[4 * depth + odd].imag();
    temp_array[1] = f[5 * depth + odd].imag();
    temp_array[2] = f[6 * depth + odd].imag();
    temp_array[3] = f[7 * depth + odd].imag();
    auto f_imags_4_5_6_7 = _mm256_load_pd(temp_array);
    temp_array[0] = f[8 * depth + odd].real();
    temp_array[1] = f[9 * depth + odd].real();
    temp_array[2] = f[10 * depth + odd].real();
    temp_array[3] = f[11 * depth + odd].real();
    auto f_reals_8_9_10_11 = _mm256_load_pd(temp_array);
    temp_array[0] = f[8 * depth + odd].imag();
    temp_array[1] = f[9 * depth + odd].imag();
    temp_array[2] = f[10 * depth + odd].imag();
    temp_array[3] = f[11 * depth + odd].imag();
    auto f_imags_8_9_10_11 = _mm256_load_pd(temp_array);
    temp_array[0] = f[12 * depth + odd].real();
    temp_array[1] = f[13 * depth + odd].real();
    temp_array[2] = f[14 * depth + odd].real();
    temp_array[3] = f[15 * depth + odd].real();
    auto f_reals_12_13_14_15 = _mm256_load_pd(temp_array);
    temp_array[0] = f[12 * depth + odd].imag();
    temp_array[1] = f[13 * depth + odd].imag();
    temp_array[2] = f[14 * depth + odd].imag();
    temp_array[3] = f[15 * depth + odd].imag();
    auto f_imags_12_13_14_15 = _mm256_load_pd(temp_array);
    x[offset] = Complex(accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, cos_s_00), _mm256_mul_pd(f_imags_0_1_2_3, sin_s_00)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, cos_s_04), _mm256_mul_pd(f_imags_4_5_6_7, sin_s_04))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, cos_s_08), _mm256_mul_pd(f_imags_8_9_10_11, sin_s_08))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, cos_s_012), _mm256_mul_pd(f_imags_12_13_14_15, sin_s_012)))),
         accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, sin_s_negative_00),  _mm256_mul_pd(f_imags_0_1_2_3, cos_s_00)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, sin_s_negative_04),  _mm256_mul_pd(f_imags_4_5_6_7, cos_s_04))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, sin_s_negative_08),  _mm256_mul_pd(f_imags_8_9_10_11, cos_s_08))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, sin_s_negative_012),  _mm256_mul_pd(f_imags_12_13_14_15, cos_s_012)))));
    x[1 + offset] = Complex(accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, cos_s_10), _mm256_mul_pd(f_imags_0_1_2_3, sin_s_10)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, cos_s_14), _mm256_mul_pd(f_imags_4_5_6_7, sin_s_14))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, cos_s_18), _mm256_mul_pd(f_imags_8_9_10_11, sin_s_18))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, cos_s_112), _mm256_mul_pd(f_imags_12_13_14_15, sin_s_112))))
    , accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, sin_s_negative_10),  _mm256_mul_pd(f_imags_0_1_2_3, cos_s_10)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, sin_s_negative_14),  _mm256_mul_pd(f_imags_4_5_6_7, cos_s_14))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, sin_s_negative_18),  _mm256_mul_pd(f_imags_8_9_10_11, cos_s_18))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, sin_s_negative_112),  _mm256_mul_pd(f_imags_12_13_14_15, cos_s_112)))));
    x[2 + offset] = Complex(accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, cos_s_20), _mm256_mul_pd(f_imags_0_1_2_3, sin_s_20)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, cos_s_24), _mm256_mul_pd(f_imags_4_5_6_7, sin_s_24))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, cos_s_28), _mm256_mul_pd(f_imags_8_9_10_11, sin_s_28))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, cos_s_212), _mm256_mul_pd(f_imags_12_13_14_15, sin_s_212))))
    , accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, sin_s_negative_20),  _mm256_mul_pd(f_imags_0_1_2_3, cos_s_20)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, sin_s_negative_24),  _mm256_mul_pd(f_imags_4_5_6_7, cos_s_24))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, sin_s_negative_28),  _mm256_mul_pd(f_imags_8_9_10_11, cos_s_28))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, sin_s_negative_212),  _mm256_mul_pd(f_imags_12_13_14_15, cos_s_212)))));
    x[3 + offset] = Complex(accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, cos_s_30), _mm256_mul_pd(f_imags_0_1_2_3, sin_s_30)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, cos_s_34), _mm256_mul_pd(f_imags_4_5_6_7, sin_s_34))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, cos_s_38), _mm256_mul_pd(f_imags_8_9_10_11, sin_s_38))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, cos_s_312), _mm256_mul_pd(f_imags_12_13_14_15, sin_s_312))))
    , accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, sin_s_negative_30),  _mm256_mul_pd(f_imags_0_1_2_3, cos_s_30)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, sin_s_negative_34),  _mm256_mul_pd(f_imags_4_5_6_7, cos_s_34))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, sin_s_negative_38),  _mm256_mul_pd(f_imags_8_9_10_11, cos_s_38))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, sin_s_negative_312),  _mm256_mul_pd(f_imags_12_13_14_15, cos_s_312)))));
    x[4 + offset] = Complex(accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, cos_s_40), _mm256_mul_pd(f_imags_0_1_2_3, sin_s_40)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, cos_s_44), _mm256_mul_pd(f_imags_4_5_6_7, sin_s_44))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, cos_s_48), _mm256_mul_pd(f_imags_8_9_10_11, sin_s_48))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, cos_s_412), _mm256_mul_pd(f_imags_12_13_14_15, sin_s_412))))
    , accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, sin_s_negative_40),  _mm256_mul_pd(f_imags_0_1_2_3, cos_s_40)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, sin_s_negative_44),  _mm256_mul_pd(f_imags_4_5_6_7, cos_s_44))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, sin_s_negative_48),  _mm256_mul_pd(f_imags_8_9_10_11, cos_s_48))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, sin_s_negative_412),  _mm256_mul_pd(f_imags_12_13_14_15, cos_s_412)))));
    x[5 + offset] = Complex(accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, cos_s_50), _mm256_mul_pd(f_imags_0_1_2_3, sin_s_50)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, cos_s_54), _mm256_mul_pd(f_imags_4_5_6_7, sin_s_54))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, cos_s_58), _mm256_mul_pd(f_imags_8_9_10_11, sin_s_58))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, cos_s_512), _mm256_mul_pd(f_imags_12_13_14_15, sin_s_512))))
    , accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, sin_s_negative_50),  _mm256_mul_pd(f_imags_0_1_2_3, cos_s_50)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, sin_s_negative_54),  _mm256_mul_pd(f_imags_4_5_6_7, cos_s_54))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, sin_s_negative_58),  _mm256_mul_pd(f_imags_8_9_10_11, cos_s_58))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, sin_s_negative_512),  _mm256_mul_pd(f_imags_12_13_14_15, cos_s_512)))));
    x[6 + offset] = Complex(accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, cos_s_60), _mm256_mul_pd(f_imags_0_1_2_3, sin_s_60)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, cos_s_64), _mm256_mul_pd(f_imags_4_5_6_7, sin_s_64))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, cos_s_68), _mm256_mul_pd(f_imags_8_9_10_11, sin_s_68))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, cos_s_612), _mm256_mul_pd(f_imags_12_13_14_15, sin_s_612))))
    , accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, sin_s_negative_60),  _mm256_mul_pd(f_imags_0_1_2_3, cos_s_60)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, sin_s_negative_64),  _mm256_mul_pd(f_imags_4_5_6_7, cos_s_64))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, sin_s_negative_68),  _mm256_mul_pd(f_imags_8_9_10_11, cos_s_68))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, sin_s_negative_612),  _mm256_mul_pd(f_imags_12_13_14_15, cos_s_612)))));
    x[7 + offset] = Complex(accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, cos_s_70), _mm256_mul_pd(f_imags_0_1_2_3, sin_s_70)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, cos_s_74), _mm256_mul_pd(f_imags_4_5_6_7, sin_s_74))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, cos_s_78), _mm256_mul_pd(f_imags_8_9_10_11, sin_s_78))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, cos_s_712), _mm256_mul_pd(f_imags_12_13_14_15, sin_s_712))))
    , accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, sin_s_negative_70),  _mm256_mul_pd(f_imags_0_1_2_3, cos_s_70)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, sin_s_negative_74),  _mm256_mul_pd(f_imags_4_5_6_7, cos_s_74))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, sin_s_negative_78),  _mm256_mul_pd(f_imags_8_9_10_11, cos_s_78))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, sin_s_negative_712),  _mm256_mul_pd(f_imags_12_13_14_15, cos_s_712)))));
    x[8 + offset] = Complex(accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, cos_s_80), _mm256_mul_pd(f_imags_0_1_2_3, sin_s_80)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, cos_s_84), _mm256_mul_pd(f_imags_4_5_6_7, sin_s_84))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, cos_s_88), _mm256_mul_pd(f_imags_8_9_10_11, sin_s_88))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, cos_s_812), _mm256_mul_pd(f_imags_12_13_14_15, sin_s_812))))
    , accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, sin_s_negative_80),  _mm256_mul_pd(f_imags_0_1_2_3, cos_s_80)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, sin_s_negative_84),  _mm256_mul_pd(f_imags_4_5_6_7, cos_s_84))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, sin_s_negative_88),  _mm256_mul_pd(f_imags_8_9_10_11, cos_s_88))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, sin_s_negative_812),  _mm256_mul_pd(f_imags_12_13_14_15, cos_s_812)))));
    x[9 + offset] = Complex(accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, cos_s_90), _mm256_mul_pd(f_imags_0_1_2_3, sin_s_90)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, cos_s_94), _mm256_mul_pd(f_imags_4_5_6_7, sin_s_94))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, cos_s_98), _mm256_mul_pd(f_imags_8_9_10_11, sin_s_98))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, cos_s_912), _mm256_mul_pd(f_imags_12_13_14_15, sin_s_912))))
    , accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, sin_s_negative_90),  _mm256_mul_pd(f_imags_0_1_2_3, cos_s_90)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, sin_s_negative_94),  _mm256_mul_pd(f_imags_4_5_6_7, cos_s_94))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, sin_s_negative_98),  _mm256_mul_pd(f_imags_8_9_10_11, cos_s_98))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, sin_s_negative_912),  _mm256_mul_pd(f_imags_12_13_14_15, cos_s_912)))));
    x[10 + offset] = Complex(accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, cos_s_100), _mm256_mul_pd(f_imags_0_1_2_3, sin_s_100)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, cos_s_104), _mm256_mul_pd(f_imags_4_5_6_7, sin_s_104))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, cos_s_108), _mm256_mul_pd(f_imags_8_9_10_11, sin_s_108))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, cos_s_1012), _mm256_mul_pd(f_imags_12_13_14_15, sin_s_1012))))
    , accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, sin_s_negative_100),  _mm256_mul_pd(f_imags_0_1_2_3, cos_s_100)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, sin_s_negative_104),  _mm256_mul_pd(f_imags_4_5_6_7, cos_s_104))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, sin_s_negative_108),  _mm256_mul_pd(f_imags_8_9_10_11, cos_s_108))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, sin_s_negative_1012),  _mm256_mul_pd(f_imags_12_13_14_15, cos_s_1012)))));
    x[11 + offset] = Complex(accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, cos_s_110), _mm256_mul_pd(f_imags_0_1_2_3, sin_s_110)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, cos_s_114), _mm256_mul_pd(f_imags_4_5_6_7, sin_s_114))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, cos_s_118), _mm256_mul_pd(f_imags_8_9_10_11, sin_s_118))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, cos_s_1112), _mm256_mul_pd(f_imags_12_13_14_15, sin_s_1112))))
    , accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, sin_s_negative_110),  _mm256_mul_pd(f_imags_0_1_2_3, cos_s_110)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, sin_s_negative_114),  _mm256_mul_pd(f_imags_4_5_6_7, cos_s_114))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, sin_s_negative_118),  _mm256_mul_pd(f_imags_8_9_10_11, cos_s_118))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, sin_s_negative_1112),  _mm256_mul_pd(f_imags_12_13_14_15, cos_s_1112)))));
    x[12 + offset] = Complex(accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, cos_s_120), _mm256_mul_pd(f_imags_0_1_2_3, sin_s_120)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, cos_s_124), _mm256_mul_pd(f_imags_4_5_6_7, sin_s_124))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, cos_s_128), _mm256_mul_pd(f_imags_8_9_10_11, sin_s_128))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, cos_s_1212), _mm256_mul_pd(f_imags_12_13_14_15, sin_s_1212))))
    , accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, sin_s_negative_120),  _mm256_mul_pd(f_imags_0_1_2_3, cos_s_120)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, sin_s_negative_124),  _mm256_mul_pd(f_imags_4_5_6_7, cos_s_124))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, sin_s_negative_128),  _mm256_mul_pd(f_imags_8_9_10_11, cos_s_128))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, sin_s_negative_1212),  _mm256_mul_pd(f_imags_12_13_14_15, cos_s_1212)))));
    x[13 + offset] = Complex(accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, cos_s_130), _mm256_mul_pd(f_imags_0_1_2_3, sin_s_130)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, cos_s_134), _mm256_mul_pd(f_imags_4_5_6_7, sin_s_134))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, cos_s_138), _mm256_mul_pd(f_imags_8_9_10_11, sin_s_138))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, cos_s_1312), _mm256_mul_pd(f_imags_12_13_14_15, sin_s_1312))))
    , accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, sin_s_negative_130),  _mm256_mul_pd(f_imags_0_1_2_3, cos_s_130)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, sin_s_negative_134),  _mm256_mul_pd(f_imags_4_5_6_7, cos_s_134))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, sin_s_negative_138),  _mm256_mul_pd(f_imags_8_9_10_11, cos_s_138))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, sin_s_negative_1312),  _mm256_mul_pd(f_imags_12_13_14_15, cos_s_1312)))));
    x[14 + offset] = Complex(accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, cos_s_140), _mm256_mul_pd(f_imags_0_1_2_3, sin_s_140)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, cos_s_144), _mm256_mul_pd(f_imags_4_5_6_7, sin_s_144))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, cos_s_148), _mm256_mul_pd(f_imags_8_9_10_11, sin_s_148))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, cos_s_1412), _mm256_mul_pd(f_imags_12_13_14_15, sin_s_1412))))
    , accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, sin_s_negative_140),  _mm256_mul_pd(f_imags_0_1_2_3, cos_s_140)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, sin_s_negative_144),  _mm256_mul_pd(f_imags_4_5_6_7, cos_s_144))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, sin_s_negative_148),  _mm256_mul_pd(f_imags_8_9_10_11, cos_s_148))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, sin_s_negative_1412),  _mm256_mul_pd(f_imags_12_13_14_15, cos_s_1412)))));
    x[15 + offset] = Complex(accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, cos_s_150), _mm256_mul_pd(f_imags_0_1_2_3, sin_s_150)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, cos_s_154), _mm256_mul_pd(f_imags_4_5_6_7, sin_s_154))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, cos_s_158), _mm256_mul_pd(f_imags_8_9_10_11, sin_s_158))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, cos_s_1512), _mm256_mul_pd(f_imags_12_13_14_15, sin_s_1512)))),accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, sin_s_negative_150),  _mm256_mul_pd(f_imags_0_1_2_3, cos_s_150)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, sin_s_negative_154),  _mm256_mul_pd(f_imags_4_5_6_7, cos_s_154))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, sin_s_negative_158),  _mm256_mul_pd(f_imags_8_9_10_11, cos_s_158))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, sin_s_negative_1512),  _mm256_mul_pd(f_imags_12_13_14_15, cos_s_1512)))));
}

inline void dft_16_simd(const std::vector<Complex1>& f, std::vector<Complex1>& x, unsigned int depth, unsigned int odd, unsigned int offset) {
    Real temp_array[4];
    temp_array[0] = f[odd].re;
    temp_array[1] = f[depth + odd].re;
    temp_array[2] = f[2 * depth + odd].re;
    temp_array[3] = f[3 * depth + odd].re;
    auto f_reals_0_1_2_3 = _mm256_load_pd(temp_array);
    temp_array[0] = f[odd].im;
    temp_array[1] = f[1 * depth + odd].im;
    temp_array[2] = f[2 * depth + odd].im;
    temp_array[3] = f[3 * depth + odd].im;
    auto f_imags_0_1_2_3 = _mm256_load_pd(temp_array);
    temp_array[0] = f[4 * depth + odd].re;
    temp_array[1] = f[5 * depth + odd].re;
    temp_array[2] = f[6 * depth + odd].re;
    temp_array[3] = f[7 * depth + odd].re;
    auto f_reals_4_5_6_7 = _mm256_load_pd(temp_array);
    temp_array[0] = f[4 * depth + odd].im;
    temp_array[1] = f[5 * depth + odd].im;
    temp_array[2] = f[6 * depth + odd].im;
    temp_array[3] = f[7 * depth + odd].im;
    auto f_imags_4_5_6_7 = _mm256_load_pd(temp_array);
    temp_array[0] = f[8 * depth + odd].re;
    temp_array[1] = f[9 * depth + odd].re;
    temp_array[2] = f[10 * depth + odd].re;
    temp_array[3] = f[11 * depth + odd].re;
    auto f_reals_8_9_10_11 = _mm256_load_pd(temp_array);
    temp_array[0] = f[8 * depth + odd].im;
    temp_array[1] = f[9 * depth + odd].im;
    temp_array[2] = f[10 * depth + odd].im;
    temp_array[3] = f[11 * depth + odd].im;
    auto f_imags_8_9_10_11 = _mm256_load_pd(temp_array);
    temp_array[0] = f[12 * depth + odd].re;
    temp_array[1] = f[13 * depth + odd].re;
    temp_array[2] = f[14 * depth + odd].re;
    temp_array[3] = f[15 * depth + odd].re;
    auto f_reals_12_13_14_15 = _mm256_load_pd(temp_array);
    temp_array[0] = f[12 * depth + odd].im;
    temp_array[1] = f[13 * depth + odd].im;
    temp_array[2] = f[14 * depth + odd].im;
    temp_array[3] = f[15 * depth + odd].im;
    auto f_imags_12_13_14_15 = _mm256_load_pd(temp_array);
    x[offset] = {accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, cos_s_00), _mm256_mul_pd(f_imags_0_1_2_3, sin_s_00)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, cos_s_04), _mm256_mul_pd(f_imags_4_5_6_7, sin_s_04))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, cos_s_08), _mm256_mul_pd(f_imags_8_9_10_11, sin_s_08))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, cos_s_012), _mm256_mul_pd(f_imags_12_13_14_15, sin_s_012)))),
        accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, sin_s_negative_00),  _mm256_mul_pd(f_imags_0_1_2_3, cos_s_00)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, sin_s_negative_04),  _mm256_mul_pd(f_imags_4_5_6_7, cos_s_04))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, sin_s_negative_08),  _mm256_mul_pd(f_imags_8_9_10_11, cos_s_08))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, sin_s_negative_012),  _mm256_mul_pd(f_imags_12_13_14_15, cos_s_012))))};
    x[1 + offset] = {accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, cos_s_10), _mm256_mul_pd(f_imags_0_1_2_3, sin_s_10)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, cos_s_14), _mm256_mul_pd(f_imags_4_5_6_7, sin_s_14))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, cos_s_18), _mm256_mul_pd(f_imags_8_9_10_11, sin_s_18))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, cos_s_112), _mm256_mul_pd(f_imags_12_13_14_15, sin_s_112))))
        , accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, sin_s_negative_10),  _mm256_mul_pd(f_imags_0_1_2_3, cos_s_10)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, sin_s_negative_14),  _mm256_mul_pd(f_imags_4_5_6_7, cos_s_14))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, sin_s_negative_18),  _mm256_mul_pd(f_imags_8_9_10_11, cos_s_18))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, sin_s_negative_112),  _mm256_mul_pd(f_imags_12_13_14_15, cos_s_112))))};
    x[2 + offset] = {accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, cos_s_20), _mm256_mul_pd(f_imags_0_1_2_3, sin_s_20)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, cos_s_24), _mm256_mul_pd(f_imags_4_5_6_7, sin_s_24))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, cos_s_28), _mm256_mul_pd(f_imags_8_9_10_11, sin_s_28))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, cos_s_212), _mm256_mul_pd(f_imags_12_13_14_15, sin_s_212))))
        , accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, sin_s_negative_20),  _mm256_mul_pd(f_imags_0_1_2_3, cos_s_20)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, sin_s_negative_24),  _mm256_mul_pd(f_imags_4_5_6_7, cos_s_24))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, sin_s_negative_28),  _mm256_mul_pd(f_imags_8_9_10_11, cos_s_28))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, sin_s_negative_212),  _mm256_mul_pd(f_imags_12_13_14_15, cos_s_212))))};
    x[3 + offset] = {accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, cos_s_30), _mm256_mul_pd(f_imags_0_1_2_3, sin_s_30)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, cos_s_34), _mm256_mul_pd(f_imags_4_5_6_7, sin_s_34))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, cos_s_38), _mm256_mul_pd(f_imags_8_9_10_11, sin_s_38))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, cos_s_312), _mm256_mul_pd(f_imags_12_13_14_15, sin_s_312))))
        , accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, sin_s_negative_30),  _mm256_mul_pd(f_imags_0_1_2_3, cos_s_30)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, sin_s_negative_34),  _mm256_mul_pd(f_imags_4_5_6_7, cos_s_34))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, sin_s_negative_38),  _mm256_mul_pd(f_imags_8_9_10_11, cos_s_38))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, sin_s_negative_312),  _mm256_mul_pd(f_imags_12_13_14_15, cos_s_312))))};
    x[4 + offset] = {accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, cos_s_40), _mm256_mul_pd(f_imags_0_1_2_3, sin_s_40)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, cos_s_44), _mm256_mul_pd(f_imags_4_5_6_7, sin_s_44))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, cos_s_48), _mm256_mul_pd(f_imags_8_9_10_11, sin_s_48))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, cos_s_412), _mm256_mul_pd(f_imags_12_13_14_15, sin_s_412))))
        , accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, sin_s_negative_40),  _mm256_mul_pd(f_imags_0_1_2_3, cos_s_40)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, sin_s_negative_44),  _mm256_mul_pd(f_imags_4_5_6_7, cos_s_44))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, sin_s_negative_48),  _mm256_mul_pd(f_imags_8_9_10_11, cos_s_48))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, sin_s_negative_412),  _mm256_mul_pd(f_imags_12_13_14_15, cos_s_412))))};
    x[5 + offset] = {accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, cos_s_50), _mm256_mul_pd(f_imags_0_1_2_3, sin_s_50)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, cos_s_54), _mm256_mul_pd(f_imags_4_5_6_7, sin_s_54))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, cos_s_58), _mm256_mul_pd(f_imags_8_9_10_11, sin_s_58))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, cos_s_512), _mm256_mul_pd(f_imags_12_13_14_15, sin_s_512))))
        , accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, sin_s_negative_50),  _mm256_mul_pd(f_imags_0_1_2_3, cos_s_50)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, sin_s_negative_54),  _mm256_mul_pd(f_imags_4_5_6_7, cos_s_54))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, sin_s_negative_58),  _mm256_mul_pd(f_imags_8_9_10_11, cos_s_58))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, sin_s_negative_512),  _mm256_mul_pd(f_imags_12_13_14_15, cos_s_512))))};
    x[6 + offset] = {accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, cos_s_60), _mm256_mul_pd(f_imags_0_1_2_3, sin_s_60)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, cos_s_64), _mm256_mul_pd(f_imags_4_5_6_7, sin_s_64))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, cos_s_68), _mm256_mul_pd(f_imags_8_9_10_11, sin_s_68))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, cos_s_612), _mm256_mul_pd(f_imags_12_13_14_15, sin_s_612))))
        , accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, sin_s_negative_60),  _mm256_mul_pd(f_imags_0_1_2_3, cos_s_60)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, sin_s_negative_64),  _mm256_mul_pd(f_imags_4_5_6_7, cos_s_64))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, sin_s_negative_68),  _mm256_mul_pd(f_imags_8_9_10_11, cos_s_68))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, sin_s_negative_612),  _mm256_mul_pd(f_imags_12_13_14_15, cos_s_612))))};
    x[7 + offset] = {accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, cos_s_70), _mm256_mul_pd(f_imags_0_1_2_3, sin_s_70)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, cos_s_74), _mm256_mul_pd(f_imags_4_5_6_7, sin_s_74))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, cos_s_78), _mm256_mul_pd(f_imags_8_9_10_11, sin_s_78))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, cos_s_712), _mm256_mul_pd(f_imags_12_13_14_15, sin_s_712))))
        , accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, sin_s_negative_70),  _mm256_mul_pd(f_imags_0_1_2_3, cos_s_70)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, sin_s_negative_74),  _mm256_mul_pd(f_imags_4_5_6_7, cos_s_74))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, sin_s_negative_78),  _mm256_mul_pd(f_imags_8_9_10_11, cos_s_78))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, sin_s_negative_712),  _mm256_mul_pd(f_imags_12_13_14_15, cos_s_712))))};
    x[8 + offset] = {accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, cos_s_80), _mm256_mul_pd(f_imags_0_1_2_3, sin_s_80)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, cos_s_84), _mm256_mul_pd(f_imags_4_5_6_7, sin_s_84))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, cos_s_88), _mm256_mul_pd(f_imags_8_9_10_11, sin_s_88))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, cos_s_812), _mm256_mul_pd(f_imags_12_13_14_15, sin_s_812))))
        , accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, sin_s_negative_80),  _mm256_mul_pd(f_imags_0_1_2_3, cos_s_80)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, sin_s_negative_84),  _mm256_mul_pd(f_imags_4_5_6_7, cos_s_84))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, sin_s_negative_88),  _mm256_mul_pd(f_imags_8_9_10_11, cos_s_88))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, sin_s_negative_812),  _mm256_mul_pd(f_imags_12_13_14_15, cos_s_812))))};
    x[9 + offset] = {accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, cos_s_90), _mm256_mul_pd(f_imags_0_1_2_3, sin_s_90)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, cos_s_94), _mm256_mul_pd(f_imags_4_5_6_7, sin_s_94))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, cos_s_98), _mm256_mul_pd(f_imags_8_9_10_11, sin_s_98))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, cos_s_912), _mm256_mul_pd(f_imags_12_13_14_15, sin_s_912))))
        , accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, sin_s_negative_90),  _mm256_mul_pd(f_imags_0_1_2_3, cos_s_90)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, sin_s_negative_94),  _mm256_mul_pd(f_imags_4_5_6_7, cos_s_94))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, sin_s_negative_98),  _mm256_mul_pd(f_imags_8_9_10_11, cos_s_98))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, sin_s_negative_912),  _mm256_mul_pd(f_imags_12_13_14_15, cos_s_912))))};
    x[10 + offset] = {accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, cos_s_100), _mm256_mul_pd(f_imags_0_1_2_3, sin_s_100)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, cos_s_104), _mm256_mul_pd(f_imags_4_5_6_7, sin_s_104))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, cos_s_108), _mm256_mul_pd(f_imags_8_9_10_11, sin_s_108))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, cos_s_1012), _mm256_mul_pd(f_imags_12_13_14_15, sin_s_1012))))
        , accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, sin_s_negative_100),  _mm256_mul_pd(f_imags_0_1_2_3, cos_s_100)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, sin_s_negative_104),  _mm256_mul_pd(f_imags_4_5_6_7, cos_s_104))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, sin_s_negative_108),  _mm256_mul_pd(f_imags_8_9_10_11, cos_s_108))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, sin_s_negative_1012),  _mm256_mul_pd(f_imags_12_13_14_15, cos_s_1012))))};
    x[11 + offset] = {accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, cos_s_110), _mm256_mul_pd(f_imags_0_1_2_3, sin_s_110)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, cos_s_114), _mm256_mul_pd(f_imags_4_5_6_7, sin_s_114))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, cos_s_118), _mm256_mul_pd(f_imags_8_9_10_11, sin_s_118))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, cos_s_1112), _mm256_mul_pd(f_imags_12_13_14_15, sin_s_1112))))
        , accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, sin_s_negative_110),  _mm256_mul_pd(f_imags_0_1_2_3, cos_s_110)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, sin_s_negative_114),  _mm256_mul_pd(f_imags_4_5_6_7, cos_s_114))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, sin_s_negative_118),  _mm256_mul_pd(f_imags_8_9_10_11, cos_s_118))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, sin_s_negative_1112),  _mm256_mul_pd(f_imags_12_13_14_15, cos_s_1112))))};
    x[12 + offset] = {accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, cos_s_120), _mm256_mul_pd(f_imags_0_1_2_3, sin_s_120)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, cos_s_124), _mm256_mul_pd(f_imags_4_5_6_7, sin_s_124))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, cos_s_128), _mm256_mul_pd(f_imags_8_9_10_11, sin_s_128))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, cos_s_1212), _mm256_mul_pd(f_imags_12_13_14_15, sin_s_1212))))
        , accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, sin_s_negative_120),  _mm256_mul_pd(f_imags_0_1_2_3, cos_s_120)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, sin_s_negative_124),  _mm256_mul_pd(f_imags_4_5_6_7, cos_s_124))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, sin_s_negative_128),  _mm256_mul_pd(f_imags_8_9_10_11, cos_s_128))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, sin_s_negative_1212),  _mm256_mul_pd(f_imags_12_13_14_15, cos_s_1212))))};
    x[13 + offset] = {accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, cos_s_130), _mm256_mul_pd(f_imags_0_1_2_3, sin_s_130)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, cos_s_134), _mm256_mul_pd(f_imags_4_5_6_7, sin_s_134))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, cos_s_138), _mm256_mul_pd(f_imags_8_9_10_11, sin_s_138))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, cos_s_1312), _mm256_mul_pd(f_imags_12_13_14_15, sin_s_1312))))
        , accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, sin_s_negative_130),  _mm256_mul_pd(f_imags_0_1_2_3, cos_s_130)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, sin_s_negative_134),  _mm256_mul_pd(f_imags_4_5_6_7, cos_s_134))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, sin_s_negative_138),  _mm256_mul_pd(f_imags_8_9_10_11, cos_s_138))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, sin_s_negative_1312),  _mm256_mul_pd(f_imags_12_13_14_15, cos_s_1312))))};
    x[14 + offset] = {accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, cos_s_140), _mm256_mul_pd(f_imags_0_1_2_3, sin_s_140)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, cos_s_144), _mm256_mul_pd(f_imags_4_5_6_7, sin_s_144))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, cos_s_148), _mm256_mul_pd(f_imags_8_9_10_11, sin_s_148))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, cos_s_1412), _mm256_mul_pd(f_imags_12_13_14_15, sin_s_1412))))
        , accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, sin_s_negative_140),  _mm256_mul_pd(f_imags_0_1_2_3, cos_s_140)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, sin_s_negative_144),  _mm256_mul_pd(f_imags_4_5_6_7, cos_s_144))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, sin_s_negative_148),  _mm256_mul_pd(f_imags_8_9_10_11, cos_s_148))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, sin_s_negative_1412),  _mm256_mul_pd(f_imags_12_13_14_15, cos_s_1412))))};
    x[15 + offset] = {accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, cos_s_150), _mm256_mul_pd(f_imags_0_1_2_3, sin_s_150)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, cos_s_154), _mm256_mul_pd(f_imags_4_5_6_7, sin_s_154))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, cos_s_158), _mm256_mul_pd(f_imags_8_9_10_11, sin_s_158))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, cos_s_1512), _mm256_mul_pd(f_imags_12_13_14_15, sin_s_1512)))),accumulate(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(f_reals_0_1_2_3, sin_s_negative_150),  _mm256_mul_pd(f_imags_0_1_2_3, cos_s_150)), _mm256_add_pd(_mm256_mul_pd(f_reals_4_5_6_7, sin_s_negative_154),  _mm256_mul_pd(f_imags_4_5_6_7, cos_s_154))), _mm256_add_pd(_mm256_mul_pd(f_reals_8_9_10_11, sin_s_negative_158),  _mm256_mul_pd(f_imags_8_9_10_11, cos_s_158))), _mm256_add_pd(_mm256_mul_pd(f_reals_12_13_14_15, sin_s_negative_1512),  _mm256_mul_pd(f_imags_12_13_14_15, cos_s_1512))))};
}



#endif //FFT__DFT_16_SIMD_H_
